

// DragonAnimator.cs
using UnityEngine;

public class DragonAnimator : MonoBehaviour
{
    private Animator animator;
    public float damageShakeIntensity = 1.5f;
    public AnimationCurve shakeCurve;
    public Transform dragonTransform;
    public float damageAnimationSpeed = 3.0f;
    public AnimationCurve damageAnimationCurve;
    public float attackSpeed = 1.5f;
    public AnimationCurve attackAnimationCurve;
    public float specialAttackSpeed = 2.0f;
    public AnimationCurve specialAttackAnimationCurve;
    public GameObject healthBar;
    public GameObject energyBar;
    public GameObject specialAttackBar;
    public AudioClip damageSound;
    public AudioClip specialAttackSound;
    public AudioSource audioSource;

    private bool isDamaged = false;
    private bool isSpecialAttacking = false;
    private float attackTimer = 0f;
    private float attackDuration = 0.5f;
    private float damageAnimationDuration = 1.0f;
    private float specialAttackDuration = 1.5f;
    private DragonState currentState = DragonState.Idle;

    private enum DragonState { Idle, Attacking, Damaged, SpecialAttack }

    void Start()
    {
        animator = GetComponent<Animator>();
    }

    void Update()
    {
        HandleStateTransitions();
        UpdateAnimation();
    }

    void HandleStateTransitions()
    {
        if (isDamaged)
        {
            currentState = DragonState.Damaged;
            ShakeCamera();
            PlaySound(damageSound);
        }
        else if (isSpecialAttacking)
        {
            currentState = DragonState.SpecialAttack;
            PlaySound(specialAttackSound);
        }
        else if (IsShooting())
        {
            currentState = DragonState.Attacking;
        }
        else
        {
            currentState = DragonState.Idle;
        }
    }

    void UpdateAnimation()
    {
        animator.SetFloat("Speed", new Vector2(Input.GetAxis("Horizontal"), Input.GetAxis("Vertical")).magnitude);

        switch (currentState)
        {
            case DragonState.Idle:
                animator.SetTrigger("Idle");
                break;
            case DragonState.Attacking:
                animator.SetTrigger("Attack");
                UpdateAttackAnimation();
                break;
            case DragonState.Damaged:
                animator.SetTrigger("Damage");
                UpdateDamageAnimation();
                break;
            case DragonState.SpecialAttack:
                animator.SetTrigger("SpecialAttack");
                UpdateSpecialAttackAnimation();
                break;
        }
    }

    bool IsShooting()
    {
        return Input.GetButtonDown("Fire1");
    }

    void ShakeCamera()
    {
        Camera.main.GetComponent<CameraShake>().Shake(damageShakeIntensity, shakeCurve);
    }

    void UpdateDamageAnimation()
    {
        float damageFactor = Mathf.PingPong(Time.time * damageAnimationSpeed, damageAnimationDuration);
        animator.SetFloat("DamageIntensity", damageAnimationCurve.Evaluate(damageFactor / damageAnimationDuration));
    }

    void UpdateAttackAnimation()
    {
        attackTimer += Time.deltaTime * attackSpeed;
        animator.SetFloat("AttackIntensity", attackAnimationCurve.Evaluate(Mathf.PingPong(attackTimer, attackDuration) / attackDuration));
    }

    void UpdateSpecialAttackAnimation()
    {
        // Define special attack animation behavior
    }

    public void TriggerDamage(bool state)
    {
        isDamaged = state;
    }

    public void TriggerSpecialAttack(bool state)
    {
        isSpecialAttacking = state;
    }

    void PlaySound(AudioClip clip)
    {
        if (clip != null && audioSource != null)
        {
            audioSource.PlayOneShot(clip);
        }
    }
}

// FireballEffect.cs
using UnityEngine;

public class FireballEffect : MonoBehaviour
{
    public GameObject explosionPrefab;
    public ParticleSystem fireParticles;
    public Light fireLight;
    public float lifespan = 7f;
    public AnimationCurve lightIntensityCurve;
    public AnimationCurve fireSizeCurve;
    public float maxSize = 3f;
    public float lightFlickerSpeed = 30f;
    public TrailRenderer fireTrail;
    public AudioClip fireballSound;
    public AudioSource audioSource;

    private float elapsedTime;
    private float flickerTimer;

    void Start()
    {
        fireParticles.Play();
        fireLight.enabled = true;
        elapsedTime = 0f;
        fireTrail.time = lifespan;
        PlayFireballSound();
    }

    void Update()
    {
        elapsedTime += Time.deltaTime;
        flickerTimer += Time.deltaTime * lightFlickerSpeed;

        fireLight.intensity = lightIntensityCurve.Evaluate(elapsedTime / lifespan);
        fireParticles.transform.localScale = Vector3.one * fireSizeCurve.Evaluate(elapsedTime / lifespan) * maxSize;
        fireTrail.widthMultiplier = fireSizeCurve.Evaluate(elapsedTime / lifespan);

        if (elapsedTime >= lifespan)
        {
            Destroy(gameObject);
        }
    }

    void OnCollisionEnter(Collision collision)
    {
        Instantiate(explosionPrefab, transform.position, transform.rotation);
        SoundManager.instance.PlayExplosionSound(transform.position);
        Destroy(gameObject);
    }

    void PlayFireballSound()
    {
        if (fireballSound != null && audioSource != null)
        {
            audioSource.PlayOneShot(fireballSound);
        }
    }
}

// DynamicLighting.cs
using UnityEngine;

public class DynamicLighting : MonoBehaviour
{
    public Light sceneLight;
    public Color defaultColor;
    public Color explosionColor;
    public float changeSpeed = 4f;
    public AnimationCurve colorTransitionCurve;
    private bool isExploding;
    private float transitionTime;

    void Update()
    {
        if (isExploding)
        {
            transitionTime += Time.deltaTime * changeSpeed;
            sceneLight.color = Color.Lerp(sceneLight.color, explosionColor, colorTransitionCurve.Evaluate(transitionTime));
            if (transitionTime >= 1f)
            {
                isExploding = false;
            }
        }
        else
        {
            transitionTime -= Time.deltaTime * changeSpeed;
            sceneLight.color = Color.Lerp(sceneLight.color, defaultColor, colorTransitionCurve.Evaluate(Mathf.Clamp01(transitionTime)));
        }
    }

    public void TriggerExplosion()
    {
        isExploding = true;
        transitionTime = 0f;
    }
}

// SoundManager.cs
using UnityEngine;
using System.Collections;

public class SoundManager : MonoBehaviour
{
    public static SoundManager instance;

    public AudioClip fireballSound;
    public AudioClip explosionSound;
    public AudioClip coinCollectSound;
    public AudioClip dragonHurtSound;
    public AudioClip bossMusic;
    public AudioClip levelCompleteSound;
    public AudioClip ambientSound;
    public AudioClip[] backgroundTracks;

    private AudioSource audioSource;
    private AudioSource musicSource;
    private AudioSource ambientSource;
    private int currentTrackIndex = 0;
    private float pitchChangeSpeed = 0.3f;

    void Awake()
    {
        if (instance == null)
        {
            instance = this;
            DontDestroyOnLoad(gameObject);
        }
        else
        {
            Destroy(gameObject);
        }

        audioSource = GetComponent<AudioSource>();
        musicSource = gameObject.AddComponent<AudioSource>();
        ambientSource = gameObject.AddComponent<AudioSource>();

        musicSource.loop = true;
        ambientSource.loop = true;
    }

    public void PlaySound(AudioClip clip, float volume = 1f, float pitch = 1f)
    {
        audioSource.pitch = pitch;
        audioSource.PlayOneShot(clip, volume);
    }

    public void PlayFireballSound(float volume = 1f, float pitch = 1f)
    {
        PlaySound(fireballSound, volume, pitch);
    }

    public void PlayExplosionSound(Vector3 position, float volume = 1f, float pitch = 1f)
    {
        AudioSource.PlayClipAtPoint(explosionSound, position, volume);
    }

    public void PlayCoinCollectSound(float volume = 1f, float pitch = 1f)
    {
        PlaySound(coinCollectSound, volume, pitch);
    }

    public void PlayDragonHurtSound(float volume = 1f, float pitch = 1f)
    {
        PlaySound(dragonHurtSound, volume, pitch);
    }

    public void PlayBossMusic()
    {
        musicSource.clip = bossMusic;
        musicSource.Play();
    }

    public void StopMusic()
    {
        musicSource.Stop();
    }

    public void PlayLevelCompleteSound()
    {
        PlaySound(levelCompleteSound);
    }

    public void PlayAmbientSound()
    {
        ambientSource.clip = ambientSound;
        ambientSource.Play();
    }

    public void PlayNextBackgroundTrack()
    {
        currentTrackIndex = (currentTrackIndex + 1) % backgroundTracks.Length;
        musicSource.clip = backgroundTracks[currentTrackIndex];
        musicSource.Play();
    }

    public void RandomizePitch()
    {
        StartCoroutine(ChangePitchCoroutine());
    }

    private IEnumerator ChangePitchCoroutine()
    {
        while (true)
        {
            audioSource.pitch = Mathf.Lerp(0.8f, 1.2f, Mathf.PingPong(Time.time * pitchChangeSpeed, 1));
            yield return null;
        }
    }
}

// CameraShake.cs
using UnityEngine;

public class CameraShake : MonoBehaviour
{
    public float shakeDuration = 1f;
    public float shakeMagnitude = 0.1f;
    public float dampingSpeed = 1f;
    private Vector3 initialPosition;
    private float currentShakeDuration = 0f;

    void Awake()
    {
        initialPosition = transform.localPosition;
    }

    void Update()
    {
        if (currentShakeDuration > 0)
        {
            transform.localPosition = initialPosition + Random.insideUnitSphere * shakeMagnitude;
            currentShakeDuration -= Time.deltaTime * dampingSpeed;
        }
        else
        {
            currentShakeDuration = 0f;
            transform.localPosition = initialPosition;
        }
    }

    public void Shake(float magnitude, AnimationCurve curve)
    {
        shakeMagnitude = magnitude;
        shakeDuration = curve.Evaluate(1);
        currentShakeDuration = shakeDuration;
    }
}

// UIManager.cs
using UnityEngine;
using UnityEngine.UI;

public class UIManager : MonoBehaviour
{
    public Slider healthSlider;
    public Slider energySlider;
    public Slider specialAttackSlider;
    public Text healthText;
    public Text energyText;
    public Text specialAttackText;

    public void UpdateHealth(float currentHealth, float maxHealth)
    {
        healthSlider.value = currentHealth / maxHealth;
        healthText.text = $"Health: {currentHealth}/{maxHealth}";
    }

    public void UpdateEnergy(float currentEnergy, float maxEnergy)
    {
        energySlider.value = currentEnergy / maxEnergy;
        energyText.text = $"Energy: {currentEnergy}/{maxEnergy}";
    }

    public void UpdateSpecialAttack(float currentSpecialAttack, float maxSpecialAttack)
    {
        specialAttackSlider.value = currentSpecialAttack / maxSpecialAttack;
        specialAttackText.text = $"Special Attack: {currentSpecialAttack}/{maxSpecialAttack}";
    }
}
